package controller;

import database.DBAppointment;
import database.DBContact;
import database.DBCustomer;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import model.Appointment;
import model.Contact;
import util.TimeConverter;

import java.net.URL;
import java.text.DateFormatSymbols;
import java.util.Arrays;
import java.util.ResourceBundle;

public class ReportFormController implements Initializable {

    private final ControllerUtil controllerUtil = new ControllerUtil();
    private ObservableList<Contact> allContact = FXCollections.observableArrayList();
    private ObservableList<Appointment> allAppointment = FXCollections.observableArrayList();
    private ObservableList<String> allPostal = FXCollections.observableArrayList();
    private ObservableList<String> allType = FXCollections.observableArrayList();
    private ObservableList<String> allContactName = FXCollections.observableArrayList();
    private ObservableList<String> allMonth = FXCollections.observableArrayList();

    @FXML
    private TableView<Appointment> appointmentTable;

    @FXML
    private TableColumn<?, ?> appId;

    @FXML
    private TableColumn<?, ?> appCustomerId;

    @FXML
    private TableColumn<?, ?> appTitle;

    @FXML
    private TableColumn<?, ?> appType;

    @FXML
    private TableColumn<?, ?> appDescription;

    @FXML
    private TableColumn<?, ?> appStart;

    @FXML
    private TableColumn<?, ?> appEnd;

    @FXML
    private ComboBox<String> contactCombo;

    @FXML
    private ComboBox<String> typeCombo;

    @FXML
    private ComboBox<String> monthCombo;

    @FXML
    private ComboBox<String> postalCombo;

    @FXML
    void cancelHandler(ActionEvent event) {
        controllerUtil.quickChangeScreen(event, "../view/MainForm.fxml");
    }

    @FXML
    void selectContactHandler() {
        String contactName = contactCombo.getValue();

        if (contactName == null) {
            controllerUtil.errorPopup("Error", "No selection was made!",
                    "Please ensure the field has a selected contact name!");
            return;
        }

        displayTable(contactName);
    }

    @FXML
    void selectCustomerHandler() {
        String customerPostalCode = postalCombo.getValue();

        if (customerPostalCode == null) {
            controllerUtil.errorPopup("Error", "No selection was made!",
                    "Please ensure the field has a selected postal code!");
            return;
        }

        int count = DBCustomer.getPostalCodeCount(customerPostalCode);
        controllerUtil.infoPopup("Information", "The amount of that specific postal code for customers is listed below.",
                "Postal Code: " + customerPostalCode + "\nCount: " + count);
    }

    @FXML
    void selectTypeHandler() {
        String selectedType = typeCombo.getValue();
        String selectedMonth = monthCombo.getValue();

        if (selectedType == null || selectedMonth == null) {
            controllerUtil.errorPopup("Error", "No selection was made!",
                    "Please ensure both fields have a selected month or type");
            return;
        }

        int count = DBAppointment.getTypeCountByMonth(selectedType, selectedMonth);
        controllerUtil.infoPopup("Information", "The amount of that type for the specified month is listed below.",
                "Type: " + selectedType + "\nMonth: " + selectedMonth + "\nCount: " + count);
    }

    private void databasePopulateLists() {
        allPostal = DBCustomer.getAllPostalCodes();
        allContact = DBContact.getAllContacts();
        allAppointment = DBAppointment.getAllAppointments();
        allType = DBAppointment.getAllTypes();
    }

    private void getContactNames() {
        for (Contact contact : allContact) {
            allContactName.add(contact.getContactName());
        }
    }

    private void populateCombos() {
        contactCombo.setItems(allContactName);
        postalCombo.setItems(allPostal);
        typeCombo.setItems(allType);

        // Populate months
        String[] arrMonths = new DateFormatSymbols().getMonths();

        // length-1 is used to remove whitespace generated by getMonths()
        allMonth.addAll(Arrays.asList(arrMonths).subList(0, arrMonths.length - 1));
        monthCombo.setItems(allMonth);
    }

    private void timeConversion() {
        Appointment temp;
        for (Appointment appointment : allAppointment) {
            temp = appointment;
            appointment.setZoneStartTime(TimeConverter.formatTimeToTable(TimeConverter.formatTimeToZone(temp.getStartTime())));
            appointment.setZoneEndTime(TimeConverter.formatTimeToTable(TimeConverter.formatTimeToZone(temp.getEndTime())));
        }
    }

    private void initTable() {
        appId.setCellValueFactory(new PropertyValueFactory<>("id"));
        appCustomerId.setCellValueFactory(new PropertyValueFactory<>("customerId"));
        appTitle.setCellValueFactory(new PropertyValueFactory<>("title"));
        appDescription.setCellValueFactory(new PropertyValueFactory<>("description"));
        appType.setCellValueFactory(new PropertyValueFactory<>("type"));
        appStart.setCellValueFactory(new PropertyValueFactory<>("zoneStartTime"));
        appEnd.setCellValueFactory(new PropertyValueFactory<>("zoneEndTime"));
    }

    private void displayTable(String contact) {
        int id = -1;
        for (Contact value : allContact) {
            if (contact.equals(value.getContactName())) {
                id = value.getContactId();
                break;
            }
        }

        ObservableList<Appointment> filteredAppointments = FXCollections.observableArrayList();
        for (Appointment appointment : allAppointment) {
            if (appointment.getContactId() == id) {
                filteredAppointments.add(appointment);
            }
        }
        appointmentTable.setItems(filteredAppointments);
    }

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        databasePopulateLists();
        getContactNames();
        populateCombos();
        timeConversion();
        initTable();
    }
}
